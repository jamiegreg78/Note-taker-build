{"version":3,"sources":["Components/ListItem.js","Components/NewNote.js","Components/List.js","Components/SaveNotification.js","Components/NoteEditor.js","App.js","reportWebVitals.js","index.js"],"names":["ListItem","props","className","onClick","selectNote","note","id","title","event","stopPropagation","deleteNote","icon","faTrash","size","NewNote","useState","newTitle","setNewTitle","buttonMode","setButtonMode","switchButtonMode","document","getElementById","style","display","type","value","maxLength","onChange","target","placeholder","preventDefault","createNote","alert","List","notes","map","item","SaveNotification","text","NoteEditor","setId","setTitle","setText","loaded","setLoaded","showNotification","setShowNotification","useEffect","content","autoSave","useCallback","debounce","input","saveNote","setTimeout","autoSize","element","offset","offsetHeight","clientHeight","height","scrollHeight","theme","modules","toolbar","App","setNotes","isNoteSelected","setIsNoteSelected","selectedNote","setSelectedNote","sideBarHidden","setSideBarHidden","Storage","localStorage","getItem","setItem","JSON","stringify","parse","saveToLocalStorage","deselectNote","noteTitle","randomId","Math","random","toString","replace","oldNotes","noteId","window","confirm","filter","findIndex","list","getElementsByClassName","offsetWidth","width","faBars","faCaretLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3069fc54.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default function ListItem(props) {\r\n\r\n    /* Stops the click event propagating to the parent - prevents selecting after deletion\r\n    */\r\n    const clickDelete = (event) => {\r\n        event.stopPropagation();\r\n        props.deleteNote(props.note.id);\r\n    }\r\n\r\n    return (\r\n        <div className=\"list-item\" onClick={() => props.selectNote(props.note.id)}>\r\n            <div className=\"item-overview\">\r\n                <p>{props.note.title}</p>\r\n            </div>\r\n            <button onClick={clickDelete} className=\"delete\">\r\n                <FontAwesomeIcon icon={faTrash} size=\"2x\" />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n\r\nexport default function NewNote(props) {\r\n    const [newTitle, setNewTitle] = useState(\"\");\r\n    const [buttonMode, setButtonMode] = useState(0);\r\n\r\n    const handleChange = (event) => {\r\n        setNewTitle(event.target.value);\r\n    }\r\n\r\n    const createNote = (event) => {\r\n        event.preventDefault();\r\n        if (newTitle !== \"\") {\r\n            setNewTitle(\"\");\r\n            props.createNote(newTitle);\r\n\r\n            switchButtonMode();\r\n        } else {\r\n            alert(\"Title cannot be blank\")\r\n        }\r\n\r\n    }\r\n\r\n    const switchButtonMode = () => {\r\n        // show the text field and add note button\r\n        if (!buttonMode) {\r\n            document.getElementById(\"new-note-title\").style.display = \"inline-block\";\r\n            document.getElementById(\"add-note\").style.display = \"inline-block\";\r\n            document.getElementById(\"create-new-note\").style.display = \"none\";\r\n\r\n            setButtonMode(1);\r\n        } else {\r\n            document.getElementById(\"new-note-title\").style.display = \"none\";\r\n            document.getElementById(\"add-note\").style.display = \"none\";\r\n            document.getElementById(\"create-new-note\").style.display = \"inline-block\";\r\n\r\n            setButtonMode(0);\r\n        }\r\n    }\r\n\r\n\r\n    const newNote = (event) => {\r\n        event.preventDefault();\r\n        switchButtonMode();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <input\r\n                    id=\"new-note-title\"\r\n                    type=\"text\"\r\n                    value={newTitle}\r\n                    maxLength=\"100\"\r\n                    onChange={handleChange}\r\n                    placeholder=\"Title\"\r\n                    style={{ display: \"none\" }}>\r\n\r\n                </input>\r\n                <button className=\"new-note\" id=\"add-note\" onClick={createNote} style={{ display: \"none\" }}>Create Note</button>\r\n                <button className=\"new-note\" id=\"create-new-note\" onClick={newNote}>New Note</button>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport ListItem from './ListItem';\r\nimport NewNote from './NewNote';\r\n\r\n\r\nexport default function List(props) {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"file-list\">\r\n            <NewNote createNote={props.createNote} />\r\n            {props.notes.map(item => {\r\n                return <ListItem\r\n                    note={item}\r\n                    key={item.id}\r\n                    deleteNote={props.deleteNote}\r\n                    selectNote={props.selectNote} />\r\n            })}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport default function SaveNotification(props) {\r\n    return (\r\n        <div className=\"save-notification\">\r\n            <p>{props.text}</p>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, useCallback } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport debounce from 'lodash.debounce';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport SaveNotification from './SaveNotification';\r\n\r\n\r\nexport default function NoteEditor(props) {\r\n    const [id, setId] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [showNotification, setShowNotification] = useState(false);\r\n    const modules = {\r\n        toolbar: [\r\n            [{ 'header': [1, 2, 3, false] }],\r\n            ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n            [{ 'list': 'ordered' }, { 'list': 'ordered' }, { 'indent': '-1' }, { 'indent': '+1' }],\r\n            [{ 'link': 'image' }],\r\n            ['clean']\r\n        ]\r\n    }\r\n\r\n    // Initialize the text field, updates when the note updates\r\n    useEffect(() => {\r\n        setLoaded(false);\r\n        setId(props.note.id);\r\n        setText(props.note.content);\r\n        setTitle(props.note.title);\r\n    }, [props.note])\r\n\r\n    useEffect(() => {\r\n        setLoaded(true);\r\n    }, [id, title, text])\r\n\r\n    // Debounces the saving, prevents too much happening at once\r\n    const autoSave =\r\n        useCallback(\r\n            debounce(input => {\r\n                props.saveNote(props.note.id, ...input);\r\n\r\n                // Shows and hides the save notification\r\n                setShowNotification(true);\r\n                setTimeout(() => {\r\n                    setShowNotification(false);\r\n                }, 2500);\r\n            }, 1500), [props.note.id]);\r\n\r\n    const handleTitleChange = (event) => {\r\n        setTitle(event.target.value);\r\n        autoSave([event.target.value, text]);\r\n        autoSize(event.target);\r\n    }\r\n\r\n    const handleTextChange = (text) => {\r\n        setText(text);\r\n        autoSave([title, text]);\r\n    }\r\n\r\n    const autoSize = (element) => {\r\n        let offset = element.offsetHeight - element.clientHeight;\r\n        element.style.height = element.scrollHeight + offset + 'px';\r\n    }\r\n\r\n    if (loaded === true) {\r\n        return (\r\n            <div className=\"note-container\">\r\n                <textarea id=\"title\" value={title} onChange={handleTitleChange} maxLength=\"100\"></textarea>\r\n                <ReactQuill\r\n                    theme=\"snow\"\r\n                    modules={modules}\r\n                    value={text}\r\n                    onChange={handleTextChange} />\r\n                {showNotification ?\r\n                    <SaveNotification text=\"Note Saved\" /> : null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    } else {\r\n        return <div className=\"loader\"></div>\r\n    }\r\n\r\n}","import './App.scss';\nimport { useState, useEffect } from 'react';\nimport List from './Components/List';\nimport Editor from './Components/NoteEditor';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretLeft } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [isNoteSelected, setIsNoteSelected] = useState(false);\n  const [selectedNote, setSelectedNote] = useState({});\n  const [sideBarHidden, setSideBarHidden] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n\n  // Load from local storage\n  useEffect(() => {\n    // Check for web storage compatability\n    if (typeof (Storage) !== \"undefined\") {\n      // If there are no notes stored - initialize storage\n      if (localStorage.getItem(\"notes\") === null) {\n        localStorage.setItem(\"notes\", JSON.stringify({ \"notes\": [] })); // CHANGE THIS EVENTUALLY\n        setNotes(JSON.parse(localStorage.getItem(\"notes\")).notes);\n      } else {\n        setNotes(JSON.parse(localStorage.getItem(\"notes\")).notes);\n      }\n    } else {\n      alert(\"This app requires the use of the Web Storage API - you should update to a newer browser or this app won't work.\");\n    }\n\n    setLoaded(true);\n  }, [])\n\n  // Saves to the local storage when notes are modified in any way.\n  useEffect(() => {\n    saveToLocalStorage();\n  }, [notes])\n\n  const createNote = (noteTitle) => {\n    const randomId = Math.random().toString(36).replace(\"0.\", \"\");\n    setNotes(oldNotes => [...oldNotes, { \"id\": randomId, \"title\": noteTitle, \"content\": \"\" }]);\n  }\n\n  // Removes the note with the ID given in props\n  const deleteNote = (noteId) => {\n    if (window.confirm(\"Are you sure you wish to delete this note? \")) {\n      // If deleting currently selected note - deselect it first\n      if (selectedNote.id === noteId) {\n        deselectNote();\n        setNotes(notes.filter(item => item.id !== noteId));\n      } else {\n        setNotes(notes.filter(item => item.id !== noteId));\n      }\n\n    }\n  }\n\n  // Select note - gets index of item with matching id\n  const selectNote = (noteId) => {\n    // Deselects current note before selecting another one\n    if (isNoteSelected === true) {\n      deselectNote();\n    }\n    setSelectedNote(notes[notes.findIndex(item => item.id === noteId)]);\n    setIsNoteSelected(true);\n  }\n\n  const deselectNote = () => {\n    setSelectedNote({});\n    setIsNoteSelected(false);\n  }\n\n  const growList = () => {\n    const list = document.getElementsByClassName(\"file-list\")[0];\n    // If grown, shrink. Otherwise, grow\n    if (list.offsetWidth !== 0) {\n      list.style.width = \"0%\";\n      list.style.display = \"none\";\n\n      setSideBarHidden(true);\n    } else {\n      list.style.width = \"25%\";\n      list.style.display = \"block\";\n\n      setSideBarHidden(false);\n    }\n  }\n\n  // Saves to the state array\n  const saveNote = (noteId, title, content) => {\n    // Either updates the desired object or returns the whole object unmodified\n    //console.log(noteId, title, content);\n    setNotes(notes.map(item => {\n      if (item.id === noteId) {\n        return { ...item, title: title, content: content }\n      } else {\n        return item;\n      }\n    }));\n  }\n\n  // Saves the notes to localStorage\n  const saveToLocalStorage = () => {\n    localStorage.setItem(\"notes\", JSON.stringify({ \"notes\": notes }));\n  }\n\n  // {isNoteSelected === true && <Editor note={selectedNote} saveNote={saveNote} />}\n  if (loaded === true) {\n    return (\n      <div className=\"App\">\n        <List\n          notes={notes}\n          createNote={createNote}\n          deleteNote={deleteNote}\n          selectNote={selectNote} />\n        {isNoteSelected ? null : null}\n        <button id=\"sidebar-grow\" onClick={growList}>\n          {sideBarHidden ?\n            <FontAwesomeIcon icon={faBars} size=\"2x\" />\n            :\n            <FontAwesomeIcon icon={faCaretLeft} size=\"2x\" />\n          }\n\n        </button>\n        {\n          isNoteSelected\n            ?\n            <Editor\n              note={selectedNote}\n              saveNote={saveNote}\n              isNoteSelected={isNoteSelected} />\n            : null\n\n        }\n      </div>\n    );\n  }\n  else {\n    return (\n      <div className=\"loader-container\">\n        <div className=\"loader\"></div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}